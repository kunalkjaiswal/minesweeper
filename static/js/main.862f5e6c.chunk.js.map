{"version":3,"sources":["component/Cell/Cell.js","container/MineField/MineField.js","container/Minesweeper/Minesweeper.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","value","onClick","contextMenu","postionAdjuster","cellClassName","isRevealed","isMine","isFlagged","style","left","className","onContextMenu","gameStatus","neighbour","getValue","MineField","initMineField","row","column","minesCount","data","createEmptyField","addMines","getNeighbourMines","i","push","j","x","y","isEmpty","r","c","mines","Math","floor","random","k","tempData","mineCount","traversalData","traverseMineField","length","handleCellClick","cellData","state","mineFieldData","setState","revealMineField","tempMineFieldData","revealEmptyCell","getHidden","getFlags","revealedArray","getMines","mineArray","flagArray","renderMineField","map","dataRow","rowItem","e","handleContextMenu","widthMultiplier","handleResetButton","prevProps","this","rowData","preventDefault","JSON","stringify","maxWidth","minHeight","type","Component","Minesweeper","selectedLevel","level","multiplier","selectedSize","size","number","windowWidth","window","innerWidth","renderLevels","toLowerCase","renderSizes","Fragment","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.862f5e6c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Cell.css'\r\n\r\nconst Cell = (props) => {\r\n    const { value, onClick, contextMenu, postionAdjuster } = props;\r\n    let cellClassName = \"cell\";\r\n    if (!value.isRevealed)\r\n        cellClassName = cellClassName + \" hidden\";\r\n    if (value.isMine)\r\n        cellClassName = cellClassName + \" mine\";\r\n    if (value.isFlagged)\r\n        cellClassName = cellClassName + \" flag\";\r\n\r\n    const getValue = () => {\r\n        const { value, gameStatus } = props;\r\n\r\n        if (!value.isRevealed) {\r\n            return value.isFlagged ? \"ğŸš©\" : null;\r\n        }\r\n        if (value.isMine && gameStatus === 'You Won ğŸ˜ƒ') {\r\n            return \"ğŸ’£\";\r\n        }\r\n        if (value.isMine && gameStatus !== 'You Won ğŸ˜ƒ') {\r\n            return \"ğŸ’¥\";\r\n        }\r\n        if (value.neighbour === 0) {\r\n            return null;\r\n        }\r\n        return value.neighbour;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{ left: 22 - postionAdjuster }}\r\n            className={cellClassName}\r\n            onClick={onClick}\r\n            onContextMenu={contextMenu}\r\n        >\r\n            {getValue()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React, { Component } from 'react';\r\nimport Cell from '../../component/Cell/Cell';\r\nimport './MineField.css'\r\n\r\nexport default class MineField extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mineFieldData: this.initMineField(this.props.row, this.props.column, this.props.minesCount),\r\n            gameStatus: '',\r\n            minesCount: this.props.minesCount,\r\n            widthMultiplier: this.props.column\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.row !== prevProps.row || this.props.minesCount !== prevProps.minesCount) {\r\n            this.setState({\r\n                mineFieldData: this.initMineField(this.props.row, this.props.column, this.props.minesCount),\r\n                widthMultiplier: this.props.column,\r\n                gameStatus: '',\r\n                minesCount: this.props.minesCount\r\n            });\r\n        }\r\n    }\r\n\r\n    initMineField = (row, column, minesCount) => {\r\n        let data = this.createEmptyField(row, column);\r\n        data = this.addMines(data, row, column, minesCount);\r\n        data = this.getNeighbourMines(data, row, column);\r\n        return data;\r\n    }\r\n\r\n    createEmptyField = (row, column) => {\r\n        let data = [];\r\n        for (let i = 0; i < row; i++) {\r\n            data.push([]);\r\n            for (let j = 0; j < column; j++) {\r\n                data[i][j] = {\r\n                    x: i,\r\n                    y: j,\r\n                    isMine: false,\r\n                    neighbour: 0,\r\n                    isEmpty: false,\r\n                    isFlagged: false,\r\n                    isRevealed: false\r\n                };\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    addMines = (data, row, column, minesCount) => {\r\n        let r, c, mines = 0;\r\n        while (mines < minesCount) {\r\n            r = Math.floor(Math.random() * row);\r\n            c = Math.floor(Math.random() * column);\r\n            if (!(data[r][c].isMine)) {\r\n                data[r][c].isMine = true;\r\n                mines++;\r\n            }\r\n        }\r\n        return (data);\r\n    }\r\n\r\n    getNeighbourMines = (data, row, column) => {\r\n        let tempData = data, i, j, k;\r\n        for (i = 0; i < row; i++) {\r\n            for (j = 0; j < column; j++) {\r\n                if (!data[i][j].isMine) {\r\n                    let mineCount = 0;\r\n                    const traversalData = this.traverseMineField(data[i][j].x, data[i][j].y, data);\r\n                    for (k = 0; k < traversalData.length; k++) {\r\n                        if (traversalData[k].isMine) {\r\n                            mineCount++;\r\n                        }\r\n                    }\r\n                    if (mineCount === 0) {\r\n                        tempData[i][j].isEmpty = true;\r\n                    }\r\n                    tempData[i][j].neighbour = mineCount;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (tempData);\r\n    };\r\n\r\n    traverseMineField = (x, y, data) => {\r\n        const { row, column } = this.props;\r\n        const traversalData = [];\r\n\r\n        if (x > 0) {\r\n            traversalData.push(data[x - 1][y]);\r\n        }\r\n\r\n        if (x < row - 1) {\r\n            traversalData.push(data[x + 1][y]);\r\n        }\r\n\r\n        if (x > 0 && y > 0) {\r\n            traversalData.push(data[x - 1][y - 1]);\r\n        }\r\n\r\n        if (y > 0) {\r\n            traversalData.push(data[x][y - 1]);\r\n        }\r\n\r\n        if (x < row - 1 && y > 0) {\r\n            traversalData.push(data[x + 1][y - 1]);\r\n        }\r\n\r\n        if (x > 0 && y < column - 1) {\r\n            traversalData.push(data[x - 1][y + 1]);\r\n        }\r\n\r\n        if (y < column - 1) {\r\n            traversalData.push(data[x][y + 1]);\r\n        }\r\n\r\n        if (x < row - 1 && y < column - 1) {\r\n            traversalData.push(data[x + 1][y + 1]);\r\n        }\r\n\r\n        return traversalData;\r\n    }\r\n\r\n    handleCellClick = (cellData) => {\r\n        let x = cellData.x,\r\n            y = cellData.y;\r\n\r\n        if (this.state.mineFieldData[x][y].isRevealed || this.state.mineFieldData[x][y].isFlagged) return null;\r\n\r\n        if (this.state.mineFieldData[x][y].isMine) {\r\n            this.setState({ gameStatus: \"You Lost ğŸ˜©\" });\r\n            this.revealMineField();\r\n        }\r\n\r\n        let tempMineFieldData = this.state.mineFieldData;\r\n        tempMineFieldData[x][y].isFlagged = false;\r\n        tempMineFieldData[x][y].isRevealed = true;\r\n\r\n        if (tempMineFieldData[x][y].isEmpty) {\r\n            tempMineFieldData = this.revealEmptyCell(x, y, tempMineFieldData);\r\n        }\r\n\r\n        if (this.getHidden(tempMineFieldData).length === this.props.mines) {\r\n            this.setState({ mineCount: 0, gameStatus: \"You Won ğŸ˜ƒ\" });\r\n            this.revealMineField();\r\n        }\r\n\r\n        this.setState({\r\n            mineFieldData: tempMineFieldData,\r\n            minesCount: this.props.minesCount - this.getFlags(tempMineFieldData).length,\r\n        });\r\n    }\r\n\r\n    handleContextMenu(e, rowData) {\r\n        e.preventDefault();\r\n        let x = rowData.x, y = rowData.y;\r\n        let tempMineFieldData = this.state.mineFieldData;\r\n        let mines = this.state.minesCount;\r\n\r\n        if (tempMineFieldData[x][y].isRevealed) return;\r\n\r\n        if (tempMineFieldData[x][y].isFlagged) {\r\n            tempMineFieldData[x][y].isFlagged = false;\r\n            mines++;\r\n        } \r\n        else {\r\n            tempMineFieldData[x][y].isFlagged = true;\r\n            mines--;\r\n        }\r\n\r\n        if (mines === 0) {\r\n            const mineArray = this.getMines(tempMineFieldData);\r\n            const flagArray = this.getFlags(tempMineFieldData);\r\n            if (JSON.stringify(mineArray) === JSON.stringify(flagArray)) {\r\n                this.setState({ mineCount: 0, gameStatus: \"You Won ğŸ˜ƒ\" });\r\n                this.revealMineField();\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            mineFieldData: tempMineFieldData,\r\n            minesCount: mines,\r\n        });\r\n    }\r\n\r\n    revealMineField = () => {\r\n        let tempMineFieldData = this.state.mineFieldData;\r\n        let i, j;\r\n        for (i = 0; i < tempMineFieldData.length; i++) {\r\n            for (j = 0; j < tempMineFieldData[i].length; j++) {\r\n                tempMineFieldData[i][j].isRevealed = true;\r\n            }\r\n        }\r\n        this.setState({\r\n            mineFieldData: tempMineFieldData\r\n        })\r\n    }\r\n\r\n    revealEmptyCell = (x, y, tempMineFieldData) => {\r\n        let traversalData = this.traverseMineField(x, y, tempMineFieldData);\r\n        let i;\r\n        for (i = 0; i < traversalData.length; i++) {\r\n            if (!traversalData[i].isFlagged && !traversalData[i].isRevealed && (traversalData[i].isEmpty || !traversalData[i].isMine)) {\r\n                tempMineFieldData[traversalData[i].x][traversalData[i].y].isRevealed = true;\r\n                if (traversalData[i].isEmpty) {\r\n                    this.revealEmptyCell(traversalData[i].x, traversalData[i].y, tempMineFieldData);\r\n                }\r\n            }\r\n        }\r\n        return tempMineFieldData;\r\n    }\r\n\r\n    getHidden = (tempMineFieldData) => {\r\n        let revealedArray = [], i, j;\r\n\r\n        for (i = 0; i < tempMineFieldData.length; i++) {\r\n            for (j = 0; j < tempMineFieldData[i].length; j++) {\r\n                if (!tempMineFieldData[i][j].isRevealed) {\r\n                    revealedArray.push(tempMineFieldData[i][j]);\r\n                }\r\n            }\r\n        };\r\n        return revealedArray;\r\n    }\r\n\r\n    getMines = (data) => {\r\n        let mineArray = [], i, j;\r\n\r\n        for (i = 0; i < data.length; i++) {\r\n            for (j = 0; j < data[i].length; j++) {\r\n                if (data[i][j].isMine) {\r\n                    mineArray.push(data[i][j]);\r\n                }\r\n            }\r\n        }\r\n        return mineArray;\r\n    }\r\n\r\n    getFlags = (data) => {\r\n        let flagArray = [], i, j;\r\n\r\n        for (i = 0; i < data.length; i++) {\r\n            for (j = 0; j < data[i].length; j++) {\r\n                if (data[i][j].isFlagged) {\r\n                    flagArray.push(data[i][j]);\r\n                }\r\n            }\r\n        }\r\n        return flagArray;\r\n    }\r\n\r\n    renderMineField = (mineFieldData) => {\r\n        return mineFieldData.map((dataRow) => {\r\n            return dataRow.map((rowItem, i) => {\r\n                return (\r\n                    <div className=\"mine-field\"\r\n                        key={i}>\r\n                        <Cell\r\n                            onClick={() => this.handleCellClick(rowItem)}\r\n                            contextMenu={(e) => this.handleContextMenu(e, rowItem)}\r\n                            value={rowItem}\r\n                            gameStatus={this.state.gameStatus}\r\n                            postionAdjuster={this.state.widthMultiplier}\r\n                        />\r\n                    </div>\r\n                );\r\n            })\r\n        });\r\n    }\r\n\r\n    handleResetButton = () => {\r\n        this.setState({\r\n            mineFieldData: this.initMineField(this.props.row, this.props.column, this.props.minesCount),\r\n            widthMultiplier: this.props.column,\r\n            gameStatus: '',\r\n            minesCount: this.props.minesCount\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { mineFieldData, widthMultiplier, minesCount, gameStatus } = this.state;\r\n        return (\r\n            <div className=\"mine-field-main\" style={{ maxWidth: (widthMultiplier + 1) * 45, minHeight: (widthMultiplier + 2.5) * 42 }}>\r\n                <div className=\"info-blk\">\r\n                    {\r\n                        gameStatus.length ?\r\n                            <span className=\"info\">\r\n                                {gameStatus}\r\n                            </span>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                    <span className=\"info\">\r\n                        Number of mines: {minesCount}\r\n                    </span>\r\n                </div>\r\n                {this.renderMineField(mineFieldData)}\r\n                <div className=\"button-blk\">\r\n                    <input type=\"button\" className=\"button\" value=\"Reset Game\" onClick={this.handleResetButton} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport MineField from '../MineField/MineField';\r\nimport './Minesweeper.css';\r\n\r\nexport default class Minesweeper extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedLevel: { level: 'Easy', multiplier: 1 },\r\n            selectedSize: { size: '4 X 4', number: 4 },\r\n            windowWidth: window.innerWidth\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { selectedLevel, selectedSize, windowWidth } = this.state;\r\n        const levels = [{ level: 'Easy', multiplier: 1 }, { level: 'Medium', multiplier: 2 }, { level: 'Hard', multiplier: 3 }];\r\n        const sizes = [{ size: '4 X 4', number: 4 }, { size: '8 X 8', number: 8 }, { size: '12 X 12', number: 12 }];\r\n\r\n        const renderLevels = levels.map((level, i) => {\r\n            return (\r\n                <div className={selectedLevel.level.toLowerCase() === level.level.toLowerCase() ? 'active option' : 'option'} key={i} onClick={() => { this.setState({ selectedLevel: level }) }}>\r\n                    <span>{level.level}</span>\r\n                </div>\r\n            )\r\n        });\r\n\r\n        const renderSizes = sizes.map((size, i) => {\r\n            return (\r\n                <div className={selectedSize.number === size.number ? 'active option' : 'option'} key={i} onClick={() => { this.setState({ selectedSize: size }) }}>\r\n                    <span>{size.size}</span>\r\n                </div>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div className=\"main\">\r\n                {\r\n                    windowWidth > 700 ? \r\n                    <React.Fragment>\r\n                    <div className=\"header\">\r\n                        <h3 className=\"title\">Minesweeper</h3>\r\n                    </div>\r\n                    <div className=\"game-options\">\r\n                        <div className=\"game-option\">\r\n                            <div className=\"option-type\">\r\n                                <span>Level : </span>\r\n                            </div>\r\n                            {renderLevels}\r\n                        </div>\r\n                        <div className=\"game-option\">\r\n                            <div className=\"option-type\">\r\n                                <span>Size : </span>\r\n                            </div>\r\n                            {renderSizes}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"game-block\">\r\n                        <MineField row={selectedSize.number} column={selectedSize.number} minesCount={selectedSize.number * selectedLevel.multiplier} />\r\n                    </div>\r\n                </React.Fragment>:\r\n                <div className=\"warning-msg-blk\">\r\n                    <span className=\"warning-msg\">Please open in large screen device.</span>\r\n                </div>\r\n                }\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","import Minesweeper from './container/Minesweeper/Minesweeper';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minesweeper/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}